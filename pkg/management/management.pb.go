// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	rag√π          v0.2.3
// source: pkg/management/management.proto

package management

import (
	core "github.com/rancher/opni-monitoring/pkg/core"
	annotations "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WatchEventType int32

const (
	WatchEventType_Added   WatchEventType = 0
	WatchEventType_Deleted WatchEventType = 2
)

// Enum value maps for WatchEventType.
var (
	WatchEventType_name = map[int32]string{
		0: "Added",
		2: "Deleted",
	}
	WatchEventType_value = map[string]int32{
		"Added":   0,
		"Deleted": 2,
	}
)

func (x WatchEventType) Enum() *WatchEventType {
	p := new(WatchEventType)
	*p = x
	return p
}

func (x WatchEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WatchEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_management_management_proto_enumTypes[0].Descriptor()
}

func (WatchEventType) Type() protoreflect.EnumType {
	return &file_pkg_management_management_proto_enumTypes[0]
}

func (x WatchEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WatchEventType.Descriptor instead.
func (WatchEventType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_management_management_proto_rawDescGZIP(), []int{0}
}

type CreateBootstrapTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ttl    *durationpb.Duration `protobuf:"bytes,1,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Labels map[string]string    `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateBootstrapTokenRequest) Reset() {
	*x = CreateBootstrapTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_management_management_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBootstrapTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBootstrapTokenRequest) ProtoMessage() {}

func (x *CreateBootstrapTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_management_management_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBootstrapTokenRequest.ProtoReflect.Descriptor instead.
func (*CreateBootstrapTokenRequest) Descriptor() ([]byte, []int) {
	return file_pkg_management_management_proto_rawDescGZIP(), []int{0}
}

func (x *CreateBootstrapTokenRequest) GetTtl() *durationpb.Duration {
	if x != nil {
		return x.Ttl
	}
	return nil
}

func (x *CreateBootstrapTokenRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type CertsInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain []*core.CertInfo `protobuf:"bytes,1,rep,name=chain,proto3" json:"chain,omitempty"`
}

func (x *CertsInfoResponse) Reset() {
	*x = CertsInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_management_management_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertsInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertsInfoResponse) ProtoMessage() {}

func (x *CertsInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_management_management_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertsInfoResponse.ProtoReflect.Descriptor instead.
func (*CertsInfoResponse) Descriptor() ([]byte, []int) {
	return file_pkg_management_management_proto_rawDescGZIP(), []int{1}
}

func (x *CertsInfoResponse) GetChain() []*core.CertInfo {
	if x != nil {
		return x.Chain
	}
	return nil
}

type ListClustersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchLabels  *core.LabelSelector `protobuf:"bytes,1,opt,name=matchLabels,proto3" json:"matchLabels,omitempty"`
	MatchOptions core.MatchOptions   `protobuf:"varint,2,opt,name=matchOptions,proto3,enum=core.MatchOptions" json:"matchOptions,omitempty"`
}

func (x *ListClustersRequest) Reset() {
	*x = ListClustersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_management_management_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersRequest) ProtoMessage() {}

func (x *ListClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_management_management_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersRequest.ProtoReflect.Descriptor instead.
func (*ListClustersRequest) Descriptor() ([]byte, []int) {
	return file_pkg_management_management_proto_rawDescGZIP(), []int{2}
}

func (x *ListClustersRequest) GetMatchLabels() *core.LabelSelector {
	if x != nil {
		return x.MatchLabels
	}
	return nil
}

func (x *ListClustersRequest) GetMatchOptions() core.MatchOptions {
	if x != nil {
		return x.MatchOptions
	}
	return core.MatchOptions(0)
}

type EditClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *core.Reference   `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Labels  map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EditClusterRequest) Reset() {
	*x = EditClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_management_management_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditClusterRequest) ProtoMessage() {}

func (x *EditClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_management_management_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditClusterRequest.ProtoReflect.Descriptor instead.
func (*EditClusterRequest) Descriptor() ([]byte, []int) {
	return file_pkg_management_management_proto_rawDescGZIP(), []int{3}
}

func (x *EditClusterRequest) GetCluster() *core.Reference {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *EditClusterRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type WatchClustersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KnownClusters *core.ReferenceList `protobuf:"bytes,1,opt,name=knownClusters,proto3" json:"knownClusters,omitempty"`
}

func (x *WatchClustersRequest) Reset() {
	*x = WatchClustersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_management_management_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchClustersRequest) ProtoMessage() {}

func (x *WatchClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_management_management_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchClustersRequest.ProtoReflect.Descriptor instead.
func (*WatchClustersRequest) Descriptor() ([]byte, []int) {
	return file_pkg_management_management_proto_rawDescGZIP(), []int{4}
}

func (x *WatchClustersRequest) GetKnownClusters() *core.ReferenceList {
	if x != nil {
		return x.KnownClusters
	}
	return nil
}

type WatchEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *core.Reference `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Type    WatchEventType  `protobuf:"varint,2,opt,name=type,proto3,enum=management.WatchEventType" json:"type,omitempty"`
}

func (x *WatchEvent) Reset() {
	*x = WatchEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_management_management_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchEvent) ProtoMessage() {}

func (x *WatchEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_management_management_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchEvent.ProtoReflect.Descriptor instead.
func (*WatchEvent) Descriptor() ([]byte, []int) {
	return file_pkg_management_management_proto_rawDescGZIP(), []int{5}
}

func (x *WatchEvent) GetCluster() *core.Reference {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *WatchEvent) GetType() WatchEventType {
	if x != nil {
		return x.Type
	}
	return WatchEventType_Added
}

type APIExtensionInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*APIExtensionInfo `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *APIExtensionInfoList) Reset() {
	*x = APIExtensionInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_management_management_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIExtensionInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIExtensionInfoList) ProtoMessage() {}

func (x *APIExtensionInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_management_management_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIExtensionInfoList.ProtoReflect.Descriptor instead.
func (*APIExtensionInfoList) Descriptor() ([]byte, []int) {
	return file_pkg_management_management_proto_rawDescGZIP(), []int{6}
}

func (x *APIExtensionInfoList) GetItems() []*APIExtensionInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

type APIExtensionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceDesc *descriptorpb.ServiceDescriptorProto `protobuf:"bytes,1,opt,name=serviceDesc,proto3" json:"serviceDesc,omitempty"`
	Rules       []*HTTPRuleDescriptor                `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *APIExtensionInfo) Reset() {
	*x = APIExtensionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_management_management_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIExtensionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIExtensionInfo) ProtoMessage() {}

func (x *APIExtensionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_management_management_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIExtensionInfo.ProtoReflect.Descriptor instead.
func (*APIExtensionInfo) Descriptor() ([]byte, []int) {
	return file_pkg_management_management_proto_rawDescGZIP(), []int{7}
}

func (x *APIExtensionInfo) GetServiceDesc() *descriptorpb.ServiceDescriptorProto {
	if x != nil {
		return x.ServiceDesc
	}
	return nil
}

func (x *APIExtensionInfo) GetRules() []*HTTPRuleDescriptor {
	if x != nil {
		return x.Rules
	}
	return nil
}

type HTTPRuleDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Http   *annotations.HttpRule               `protobuf:"bytes,1,opt,name=http,proto3" json:"http,omitempty"`
	Method *descriptorpb.MethodDescriptorProto `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
}

func (x *HTTPRuleDescriptor) Reset() {
	*x = HTTPRuleDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_management_management_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPRuleDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRuleDescriptor) ProtoMessage() {}

func (x *HTTPRuleDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_management_management_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRuleDescriptor.ProtoReflect.Descriptor instead.
func (*HTTPRuleDescriptor) Descriptor() ([]byte, []int) {
	return file_pkg_management_management_proto_rawDescGZIP(), []int{8}
}

func (x *HTTPRuleDescriptor) GetHttp() *annotations.HttpRule {
	if x != nil {
		return x.Http
	}
	return nil
}

func (x *HTTPRuleDescriptor) GetMethod() *descriptorpb.MethodDescriptorProto {
	if x != nil {
		return x.Method
	}
	return nil
}

var File_pkg_management_management_proto protoreflect.FileDescriptor

var file_pkg_management_management_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x13, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc9, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x00,
	0x12, 0x43, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x3a, 0x00, 0x22, 0x36, 0x0a, 0x11, 0x43, 0x65, 0x72, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x65,
	0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x00, 0x3a, 0x00, 0x22, 0x6f, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x00, 0x12, 0x2a, 0x0a,
	0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x00, 0x3a, 0x00, 0x22, 0xb1, 0x01, 0x0a, 0x12,
	0x45, 0x64, 0x69, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x00, 0x12, 0x3a, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x00, 0x22,
	0x46, 0x0a, 0x14, 0x57, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0d, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x00, 0x3a, 0x00, 0x22, 0x5e, 0x0a, 0x0a, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x00, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x00, 0x3a, 0x00, 0x22, 0x47, 0x0a, 0x14, 0x41, 0x50, 0x49, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x50, 0x49, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x00, 0x3a, 0x00,
	0x22, 0x85, 0x01, 0x0a, 0x10, 0x41, 0x50, 0x49, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x00, 0x12, 0x2f, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x42, 0x00, 0x3a, 0x00, 0x22, 0x76, 0x0a, 0x12, 0x48, 0x54, 0x54, 0x50,
	0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x24,
	0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x75,
	0x6c, 0x65, 0x42, 0x00, 0x12, 0x38, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x00, 0x3a, 0x00,
	0x2a, 0x2a, 0x0a, 0x0e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x64, 0x64, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x02, 0x1a, 0x00, 0x32, 0xaa, 0x19, 0x0a,
	0x0a, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xb6, 0x01, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61,
	0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x5b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12,
	0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0xba, 0x3e, 0x3b, 0x12, 0x13, 0x0a, 0x0f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x10, 0x01, 0x42, 0x24, 0x7b, 0x70, 0x6f, 0x73,
	0x74, 0x3a, 0x22, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0x0a, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x22, 0x2a, 0x22, 0x7d,
	0x28, 0x00, 0x30, 0x00, 0x12, 0xa0, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x42,
	0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0f, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x5b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x2a, 0x17,
	0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xba, 0x3e, 0x39, 0x12, 0x13, 0x0a, 0x0f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x10, 0x01, 0x42,
	0x22, 0x7b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x3a, 0x22, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x22, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0x9b, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42,
	0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x4e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0xba, 0x3e, 0x31,
	0x12, 0x13, 0x0a, 0x0f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x68,
	0x74, 0x74, 0x70, 0x10, 0x01, 0x42, 0x1a, 0x7b, 0x67, 0x65, 0x74, 0x3a, 0x22, 0x2f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22,
	0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0x98, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f,
	0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0f, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x14, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x58, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0xba, 0x3e, 0x36, 0x12, 0x13, 0x0a, 0x0f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x10, 0x01, 0x42, 0x1f, 0x7b, 0x67, 0x65,
	0x74, 0x3a, 0x22, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x22, 0x7d, 0x28, 0x00, 0x30, 0x00,
	0x12, 0x9a, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x1f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x52, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0xba, 0x3e, 0x33, 0x12, 0x13, 0x0a, 0x0f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x10, 0x01, 0x42, 0x1c, 0x7b, 0x67, 0x65,
	0x74, 0x3a, 0x22, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xba, 0x01,
	0x0a, 0x0d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x20, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68,
	0xba, 0x3e, 0x43, 0x12, 0x13, 0x0a, 0x0f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x10, 0x01, 0x42, 0x2c, 0x7b, 0x70, 0x6f, 0x73, 0x74, 0x3a,
	0x22, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x22, 0x0a, 0x62, 0x6f, 0x64,
	0x79, 0x3a, 0x22, 0x2a, 0x22, 0x7d, 0x28, 0x00, 0x30, 0x01, 0x12, 0x9d, 0x01, 0x0a, 0x0d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0f, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x5f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x2a, 0x19, 0x2f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xba, 0x3e, 0x3b, 0x12, 0x13, 0x0a, 0x0f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x10, 0x01,
	0x42, 0x24, 0x7b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x3a, 0x22, 0x2f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x22, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0x94, 0x01, 0x0a, 0x09, 0x43,
	0x65, 0x72, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1d, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x65,
	0x72, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x73, 0xba, 0x3e, 0x30, 0x12, 0x13, 0x0a,
	0x0f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70,
	0x10, 0x01, 0x42, 0x19, 0x7b, 0x67, 0x65, 0x74, 0x3a, 0x22, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x73, 0x22, 0x7d, 0x28, 0x00, 0x30,
	0x00, 0x12, 0x8e, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x0f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x22, 0x5c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0xba, 0x3e, 0x38, 0x12, 0x13, 0x0a, 0x0f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x10, 0x01, 0x42, 0x21, 0x7b, 0x67, 0x65,
	0x74, 0x3a, 0x22, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x22, 0x7d, 0x28, 0x00,
	0x30, 0x00, 0x12, 0xba, 0x01, 0x0a, 0x0b, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x1e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x45, 0x64, 0x69, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x22, 0x78, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x1a, 0x21, 0x2f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x7d, 0xba,
	0x3e, 0x49, 0x12, 0x13, 0x0a, 0x0f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x68, 0x74, 0x74, 0x70, 0x10, 0x01, 0x42, 0x32, 0x7b, 0x70, 0x75, 0x74, 0x3a, 0x22, 0x2f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x7d,
	0x22, 0x0a, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x22, 0x2a, 0x22, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12,
	0x8f, 0x01, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0a,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x59, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73,
	0xba, 0x3e, 0x3a, 0x12, 0x13, 0x0a, 0x0f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x10, 0x01, 0x42, 0x23, 0x7b, 0x70, 0x6f, 0x73, 0x74, 0x3a,
	0x22, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x22, 0x0a, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x22, 0x2a, 0x22, 0x7d, 0x28, 0x00, 0x30,
	0x00, 0x12, 0x94, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x0f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x59, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x18, 0x2a, 0x16, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xba, 0x3e, 0x38, 0x12, 0x13, 0x0a, 0x0f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x10,
	0x01, 0x42, 0x21, 0x7b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x3a, 0x22, 0x2f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x22, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x0a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x6c,
	0x65, 0x22, 0x56, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0xba, 0x3e, 0x35, 0x12, 0x13, 0x0a, 0x0f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x10, 0x01, 0x42, 0x1e, 0x7b, 0x67, 0x65, 0x74, 0x3a,
	0x22, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x22, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xab, 0x01,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x11, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x67,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x62, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0xba, 0x3e, 0x41, 0x12, 0x13, 0x0a, 0x0f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x10, 0x01, 0x42, 0x2a, 0x7b, 0x70, 0x6f,
	0x73, 0x74, 0x3a, 0x22, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x72, 0x6f, 0x6c, 0x65, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x0a, 0x62, 0x6f,
	0x64, 0x79, 0x3a, 0x22, 0x2a, 0x22, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xa9, 0x01, 0x0a, 0x11,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x0f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x67, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1f, 0x2a, 0x1d, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x72, 0x6f, 0x6c, 0x65, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0xba, 0x3e, 0x3f, 0x12, 0x13, 0x0a, 0x0f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x10, 0x01, 0x42, 0x28, 0x7b, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x3a, 0x22, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x72, 0x6f, 0x6c, 0x65, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x22, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0x9e, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52,
	0x6f, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x0f, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x11, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x64,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xba, 0x3e, 0x3c, 0x12, 0x13, 0x0a, 0x0f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x10, 0x01, 0x42, 0x25, 0x7b,
	0x67, 0x65, 0x74, 0x3a, 0x22, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x22, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0e,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0xba, 0x3e, 0x30, 0x12, 0x13, 0x0a, 0x0f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x10,
	0x01, 0x42, 0x19, 0x7b, 0x67, 0x65, 0x74, 0x3a, 0x22, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x7d, 0x28, 0x00, 0x30, 0x00,
	0x12, 0xa1, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x15, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x5a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x62, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0xba, 0x3e, 0x37, 0x12, 0x13, 0x0a, 0x0f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x10, 0x01, 0x42, 0x20,
	0x7b, 0x67, 0x65, 0x74, 0x3a, 0x22, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x7d,
	0x28, 0x00, 0x30, 0x00, 0x12, 0xa2, 0x01, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12,
	0x19, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0xba, 0x3e, 0x38, 0x12, 0x13, 0x0a,
	0x0f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70,
	0x10, 0x01, 0x42, 0x21, 0x7b, 0x67, 0x65, 0x74, 0x3a, 0x22, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x22, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xab, 0x01, 0x0a, 0x0d, 0x41, 0x50,
	0x49, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x50, 0x49, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0xba, 0x3e, 0x38, 0x12, 0x13, 0x0a, 0x0f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x10, 0x01,
	0x42, 0x21, 0x7b, 0x67, 0x65, 0x74, 0x3a, 0x22, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x1a, 0x00, 0x42, 0x90, 0x03, 0x92, 0x41, 0x73, 0x12,
	0x71, 0x0a, 0x1e, 0x4f, 0x70, 0x6e, 0x69, 0x20, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x20, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x41, 0x50,
	0x49, 0x2a, 0x4a, 0x0a, 0x0a, 0x41, 0x70, 0x61, 0x63, 0x68, 0x65, 0x20, 0x32, 0x2e, 0x30, 0x12,
	0x3c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69,
	0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x62, 0x6c, 0x6f, 0x62,
	0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x32, 0x03, 0x31,
	0x2e, 0x30, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2d, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0xba, 0x3e, 0xe3, 0x01, 0x12, 0x3f, 0x0a, 0x3b, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32,
	0x5f, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x10, 0x01, 0x42, 0x9f, 0x01, 0x7b, 0x69, 0x6e,
	0x66, 0x6f, 0x3a, 0x7b, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3a, 0x22, 0x4f, 0x70, 0x6e, 0x69, 0x20,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x41, 0x50, 0x49, 0x22, 0x3b, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x3a, 0x22, 0x31, 0x2e, 0x30, 0x22, 0x3b, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x3a, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x22, 0x41, 0x70, 0x61, 0x63, 0x68, 0x65, 0x20, 0x32,
	0x2e, 0x30, 0x22, 0x3b, 0x75, 0x72, 0x6c, 0x3a, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x4c, 0x49,
	0x43, 0x45, 0x4e, 0x53, 0x45, 0x22, 0x3b, 0x7d, 0x3b, 0x7d, 0x3b, 0x7d, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_management_management_proto_rawDescOnce sync.Once
	file_pkg_management_management_proto_rawDescData = file_pkg_management_management_proto_rawDesc
)

func file_pkg_management_management_proto_rawDescGZIP() []byte {
	file_pkg_management_management_proto_rawDescOnce.Do(func() {
		file_pkg_management_management_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_management_management_proto_rawDescData)
	})
	return file_pkg_management_management_proto_rawDescData
}

var file_pkg_management_management_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pkg_management_management_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_pkg_management_management_proto_goTypes = []interface{}{
	(WatchEventType)(0),                         // 0: management.WatchEventType
	(*CreateBootstrapTokenRequest)(nil),         // 1: management.CreateBootstrapTokenRequest
	(*CertsInfoResponse)(nil),                   // 2: management.CertsInfoResponse
	(*ListClustersRequest)(nil),                 // 3: management.ListClustersRequest
	(*EditClusterRequest)(nil),                  // 4: management.EditClusterRequest
	(*WatchClustersRequest)(nil),                // 5: management.WatchClustersRequest
	(*WatchEvent)(nil),                          // 6: management.WatchEvent
	(*APIExtensionInfoList)(nil),                // 7: management.APIExtensionInfoList
	(*APIExtensionInfo)(nil),                    // 8: management.APIExtensionInfo
	(*HTTPRuleDescriptor)(nil),                  // 9: management.HTTPRuleDescriptor
	nil,                                         // 10: management.CreateBootstrapTokenRequest.LabelsEntry
	nil,                                         // 11: management.EditClusterRequest.LabelsEntry
	(*durationpb.Duration)(nil),                 // 12: google.protobuf.Duration
	(*core.CertInfo)(nil),                       // 13: core.CertInfo
	(*core.LabelSelector)(nil),                  // 14: core.LabelSelector
	(core.MatchOptions)(0),                      // 15: core.MatchOptions
	(*core.Reference)(nil),                      // 16: core.Reference
	(*core.ReferenceList)(nil),                  // 17: core.ReferenceList
	(*descriptorpb.ServiceDescriptorProto)(nil), // 18: google.protobuf.ServiceDescriptorProto
	(*annotations.HttpRule)(nil),                // 19: google.api.HttpRule
	(*descriptorpb.MethodDescriptorProto)(nil),  // 20: google.protobuf.MethodDescriptorProto
	(*emptypb.Empty)(nil),                       // 21: google.protobuf.Empty
	(*core.Role)(nil),                           // 22: core.Role
	(*core.RoleBinding)(nil),                    // 23: core.RoleBinding
	(*core.SubjectAccessRequest)(nil),           // 24: core.SubjectAccessRequest
	(*core.BootstrapToken)(nil),                 // 25: core.BootstrapToken
	(*core.BootstrapTokenList)(nil),             // 26: core.BootstrapTokenList
	(*core.ClusterList)(nil),                    // 27: core.ClusterList
	(*core.Cluster)(nil),                        // 28: core.Cluster
	(*core.RoleList)(nil),                       // 29: core.RoleList
	(*core.RoleBindingList)(nil),                // 30: core.RoleBindingList
}
var file_pkg_management_management_proto_depIdxs = []int32{
	12, // 0: management.CreateBootstrapTokenRequest.ttl:type_name -> google.protobuf.Duration
	10, // 1: management.CreateBootstrapTokenRequest.labels:type_name -> management.CreateBootstrapTokenRequest.LabelsEntry
	13, // 2: management.CertsInfoResponse.chain:type_name -> core.CertInfo
	14, // 3: management.ListClustersRequest.matchLabels:type_name -> core.LabelSelector
	15, // 4: management.ListClustersRequest.matchOptions:type_name -> core.MatchOptions
	16, // 5: management.EditClusterRequest.cluster:type_name -> core.Reference
	11, // 6: management.EditClusterRequest.labels:type_name -> management.EditClusterRequest.LabelsEntry
	17, // 7: management.WatchClustersRequest.knownClusters:type_name -> core.ReferenceList
	16, // 8: management.WatchEvent.cluster:type_name -> core.Reference
	0,  // 9: management.WatchEvent.type:type_name -> management.WatchEventType
	8,  // 10: management.APIExtensionInfoList.items:type_name -> management.APIExtensionInfo
	18, // 11: management.APIExtensionInfo.serviceDesc:type_name -> google.protobuf.ServiceDescriptorProto
	9,  // 12: management.APIExtensionInfo.rules:type_name -> management.HTTPRuleDescriptor
	19, // 13: management.HTTPRuleDescriptor.http:type_name -> google.api.HttpRule
	20, // 14: management.HTTPRuleDescriptor.method:type_name -> google.protobuf.MethodDescriptorProto
	1,  // 15: management.Management.CreateBootstrapToken:input_type -> management.CreateBootstrapTokenRequest
	16, // 16: management.Management.RevokeBootstrapToken:input_type -> core.Reference
	21, // 17: management.Management.ListBootstrapTokens:input_type -> google.protobuf.Empty
	16, // 18: management.Management.GetBootstrapToken:input_type -> core.Reference
	3,  // 19: management.Management.ListClusters:input_type -> management.ListClustersRequest
	5,  // 20: management.Management.WatchClusters:input_type -> management.WatchClustersRequest
	16, // 21: management.Management.DeleteCluster:input_type -> core.Reference
	21, // 22: management.Management.CertsInfo:input_type -> google.protobuf.Empty
	16, // 23: management.Management.GetCluster:input_type -> core.Reference
	4,  // 24: management.Management.EditCluster:input_type -> management.EditClusterRequest
	22, // 25: management.Management.CreateRole:input_type -> core.Role
	16, // 26: management.Management.DeleteRole:input_type -> core.Reference
	16, // 27: management.Management.GetRole:input_type -> core.Reference
	23, // 28: management.Management.CreateRoleBinding:input_type -> core.RoleBinding
	16, // 29: management.Management.DeleteRoleBinding:input_type -> core.Reference
	16, // 30: management.Management.GetRoleBinding:input_type -> core.Reference
	21, // 31: management.Management.ListRoles:input_type -> google.protobuf.Empty
	21, // 32: management.Management.ListRoleBindings:input_type -> google.protobuf.Empty
	24, // 33: management.Management.SubjectAccess:input_type -> core.SubjectAccessRequest
	21, // 34: management.Management.APIExtensions:input_type -> google.protobuf.Empty
	25, // 35: management.Management.CreateBootstrapToken:output_type -> core.BootstrapToken
	21, // 36: management.Management.RevokeBootstrapToken:output_type -> google.protobuf.Empty
	26, // 37: management.Management.ListBootstrapTokens:output_type -> core.BootstrapTokenList
	25, // 38: management.Management.GetBootstrapToken:output_type -> core.BootstrapToken
	27, // 39: management.Management.ListClusters:output_type -> core.ClusterList
	6,  // 40: management.Management.WatchClusters:output_type -> management.WatchEvent
	21, // 41: management.Management.DeleteCluster:output_type -> google.protobuf.Empty
	2,  // 42: management.Management.CertsInfo:output_type -> management.CertsInfoResponse
	28, // 43: management.Management.GetCluster:output_type -> core.Cluster
	28, // 44: management.Management.EditCluster:output_type -> core.Cluster
	21, // 45: management.Management.CreateRole:output_type -> google.protobuf.Empty
	21, // 46: management.Management.DeleteRole:output_type -> google.protobuf.Empty
	22, // 47: management.Management.GetRole:output_type -> core.Role
	21, // 48: management.Management.CreateRoleBinding:output_type -> google.protobuf.Empty
	21, // 49: management.Management.DeleteRoleBinding:output_type -> google.protobuf.Empty
	23, // 50: management.Management.GetRoleBinding:output_type -> core.RoleBinding
	29, // 51: management.Management.ListRoles:output_type -> core.RoleList
	30, // 52: management.Management.ListRoleBindings:output_type -> core.RoleBindingList
	17, // 53: management.Management.SubjectAccess:output_type -> core.ReferenceList
	7,  // 54: management.Management.APIExtensions:output_type -> management.APIExtensionInfoList
	35, // [35:55] is the sub-list for method output_type
	15, // [15:35] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_pkg_management_management_proto_init() }
func file_pkg_management_management_proto_init() {
	if File_pkg_management_management_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_management_management_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBootstrapTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_management_management_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertsInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_management_management_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClustersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_management_management_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_management_management_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchClustersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_management_management_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_management_management_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIExtensionInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_management_management_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIExtensionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_management_management_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPRuleDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_management_management_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_management_management_proto_goTypes,
		DependencyIndexes: file_pkg_management_management_proto_depIdxs,
		EnumInfos:         file_pkg_management_management_proto_enumTypes,
		MessageInfos:      file_pkg_management_management_proto_msgTypes,
	}.Build()
	File_pkg_management_management_proto = out.File
	file_pkg_management_management_proto_rawDesc = nil
	file_pkg_management_management_proto_goTypes = nil
	file_pkg_management_management_proto_depIdxs = nil
}
